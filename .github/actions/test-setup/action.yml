name: "Setup specs"
description: "Sets up the database and other things for tests, and for device screenshots"
inputs:
  uses_parallel_databases:
    required: true
    description: "Run specs in parallel, only should be true if build_type is backend or system"
  build_type:
    required: true
    description: "Building for system, backend, or frontend tests, or model annotations"
  target:
    required: true
    description: "Whether we are testing themes, plugins, or core"
  browser:
    required: true
    description: "The browser that QUnit tests are running in"
  cpu_cores:
    required: true
    description: "Number of cores that we are working with"
  parallel_test_processors:
    required: true
    description: "BLAH"
runs:
  using: "composite"
  steps:
    - name: Set QUNIT_PARALLEL for QUnit tests
      if: inputs.build_type == 'frontend'
      shell: bash
      run: |
        if [ "${{ inputs.target }}" = "themes" ]; then
          echo "QUNIT_PARALLEL=2" >> $GITHUB_ENV
        else
          echo "QUNIT_PARALLEL=$(($(nproc) / 2))" >> $GITHUB_ENV
        fi

    - name: Setup Git
      shell: bash
      run: |
        git config --global user.email "ci@ci.invalid"
        git config --global user.name "Discourse CI"

    - name: Start redis
      shell: bash
      run: |
        redis-server /etc/redis/redis.conf &

    - name: Start Postgres
      shell: bash
      env:
        PGUSER: discourse
        PGPASSWORD: discourse
      run: |
        chown -R postgres /var/run/postgresql
        sudo -E -u postgres script/start_test_db.rb
        sudo -u postgres psql -c "CREATE ROLE $PGUSER LOGIN SUPERUSER PASSWORD '$PGPASSWORD';"

    - name: Symlink vendor/bundle from image
      shell: bash
      run: |
        ln -s /var/www/discourse/vendor/bundle vendor/bundle

    - name: Setup gems
      shell: bash
      run: |
        gem install bundler --conservative -v $(awk '/BUNDLED WITH/ { getline; gsub(/ /,""); print $0 }' Gemfile.lock)
        bundle config --local path vendor/bundle
        bundle config --local deployment true
        bundle config --local without development
        bundle install --jobs $(($(nproc) - 1))
        bundle clean

    - name: pnpm install
      shell: bash
      run: pnpm install --frozen-lockfile

    - name: Checkout official plugins
      shell: bash
      if: inputs.target == 'plugins'
      run: bin/rake plugin:install_all_official

    - name: Symlinking plugin gems from image
      shell: bash
      if: inputs.target == 'plugins'
      run: |
        for dir in /var/www/discourse/plugins/*/gems; do
          plugin_name=$(basename "$(dirname "$dir")")
          plugin_dir="plugins/$plugin_name"
          gem_dir="$plugin_dir/gems"

          if [ ! -d "$plugin_dir" ]; then
            echo "Skipping $plugin_name: Plugin directory does not exist"
          elif [ -d "$gem_dir" ]; then
            echo "Skipping $plugin_name: Source gems directory exists"
          else
            echo "Symlinking $dir to $gem_dir"
            ln -s "$dir" "$gem_dir"
          fi
        done

    - name: Pull compatible versions of plugins
      shell: bash
      if: inputs.target == 'plugins' && (github.ref_name != 'main' && github.base_ref != 'main')
      run: bin/rake plugin:pull_compatible_all

    - name: Checkout official themes
      shell: bash
      if: inputs.target == 'themes'
      run: bin/rake themes:clone_all_official themes:pull_compatible_all

    - name: Add hosts to /etc/hosts, otherwise Chrome cannot reach minio
      shell: bash
      if: inputs.build_type == 'system' && inputs.target == 'core'
      run: |
        echo "127.0.0.1 minio.local" | sudo tee -a /etc/hosts
        echo "127.0.0.1 discoursetest.minio.local" | sudo tee -a /etc/hosts

    - name: Fetch app state cache
      shell: bash
      run: |
        CACHE_KEY="${{ runner.os }}-$(echo '${{ inputs.cpu_cores }}' | sha256sum | cut -d' ' -f1)-$(echo '${{ hashFiles(".github/workflows/tests.yml") }}' | sha256sum | cut -d' ' -f1)-$(echo '${{ hashFiles("db/**/*", "plugins/**/db/**/*") }}' | sha256sum | cut -d' ' -f1)-$(echo '${{ hashFiles("config/environments/test.rb") }}' | sha256sum | cut -d' ' -f1)-${{ inputs.uses_parallel_databases }}-${{ inputs.parallel_test_processors }}"

        echo "Attempting to restore cache with key: $CACHE_KEY"

        gh cache restore tmp/app-cache --key "$CACHE_KEY" || echo "No cache available"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Restore database from cache
      shell: bash
      if: steps.app-cache.outputs.cache-hit == 'true'
      run: script/silence_successful_output psql --quiet -o /dev/null -f tmp/app-cache/cache.sql postgres

    - name: Restore uploads from cache
      shell: bash
      if: steps.app-cache.outputs.cache-hit == 'true'
      run: rm -rf public/uploads && cp -r tmp/app-cache/uploads public/uploads

    - name: Create and migrate database
      shell: bash
      if: steps.app-cache.outputs.cache-hit != 'true'
      run: |
        bin/rake db:create
        script/silence_successful_output bin/rake db:migrate

    - name: Create and migrate parallel databases
      shell: bash
      if: >-
        inputs.uses_parallel_databases == 'true' &&
        steps.app-cache.outputs.cache-hit != 'true'
      run: |
        bin/rake parallel:create
        script/silence_successful_output bin/rake parallel:migrate

    - name: Dump database for cache
      shell: bash
      if: steps.app-cache.outputs.cache-hit != 'true'
      run: mkdir -p tmp/app-cache && pg_dumpall > tmp/app-cache/cache.sql

    - name: Dump uploads for cache
      shell: bash
      if: steps.app-cache.outputs.cache-hit != 'true'
      run: rm -rf tmp/app-cache/uploads && cp -r public/uploads tmp/app-cache/uploads

    - name: Fetch turbo_rspec_runtime.log cache
      if: inputs.build_type == 'backend' || inputs.build_type == 'system'
      shell: bash
      run: |
        CACHE_KEY="rspec-runtime-${{ inputs.build_type }}-${{ inputs.target }}-${{ github.run_id }}"
        RESTORE_KEYS="rspec-runtime-${{ inputs.build_type }}-${{ inputs.target }}-"

        echo "Attempting to restore cache with key: $CACHE_KEY or restore keys: $RESTORE_KEYS"

        if ! gh cache restore tmp/turbo_rspec_runtime.log --key "$CACHE_KEY"; then
          echo "Cache not found, trying restore key: $RESTORE_KEYS"
          gh cache restore tmp/turbo_rspec_runtime.log --key "$RESTORE_KEYS" || echo "No cache available"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check Zeitwerk reloading
      shell: bash
      if: inputs.build_type == 'backend'
      env:
        LOAD_PLUGINS: ${{ (inputs.target == 'plugins') && '1' || '0' }}
      run: |
        if ! bin/rails runner 'Rails.application.reloader.reload!'; then
          echo
          echo "---------------------------------------------"
          echo
          echo "::error::Zeitwerk reload failed - the app will not be able to reload properly in development."
          echo "To reproduce locally, run \`bin/rails runner 'Rails.application.reloader.reload!'\`."
          echo
          exit 1
        fi

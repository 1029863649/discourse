diff --git a/app/models/bookmark.rb b/app/models/bookmark.rb
index bc848845df..5559f70c4a 100644
--- a/app/models/bookmark.rb
+++ b/app/models/bookmark.rb
@@ -86,9 +86,13 @@ class Bookmark < ActiveRecord::Base
   end
 
   def self.select_type(bookmarks_relation, type)
-    bookmarks_relation.select { |bm| bm.bookmarkable_type == type }
+    bookmarks_relation.where(bookmarkable_type: type)
   end
 
+  # def self.select_type(bookmarks_relation, type)
+  #   bookmarks_relation.select { |bm| bm.bookmarkable_type == type }
+  # end
+
   # TODO (martin) [POLYBOOK] Not relevant once polymorphic bookmarks are implemented.
   validate :unique_per_post_for_user,
     on: [:create, :update],
diff --git a/app/models/user_bookmark_list.rb b/app/models/user_bookmark_list.rb
index fb917ebf4f..538e9b6492 100644
--- a/app/models/user_bookmark_list.rb
+++ b/app/models/user_bookmark_list.rb
@@ -42,13 +42,19 @@ class UserBookmarkList
   # on the type, and we want the associations all loaded ahead of time to make
   # sure we are not doing N1s.
   def preload_polymorphic_associations
-    @topics = Topic.includes(:topic_users, :posts).where(
-      id: Bookmark.select_type(@bookmarks, "Topic").map(&:bookmarkable_id)
-    ).where(topic_users: { user_id: @user.id })
+    # @topics = Topic.includes(:topic_users, :posts).where(
+    #   id: Bookmark.select_type(@bookmarks, "Topic").map(&:bookmarkable_id)
+    # ).where(topic_users: { user_id: @user.id })
+    ActiveRecord::Associations::Preloader.new.preload(
+      Bookmark.select_type(@bookmarks, "Topic"), [{bookmarkable: :topic_users, bookmarkable: :posts}]
+    )
 
-    @posts = Post.includes(topic: :topic_users).where(
-      id: Bookmark.select_type(@bookmarks, "Post").map(&:bookmarkable_id)
-    ).where(topic_users: { user_id: @user.id })
+    # @posts = Post.includes(topic: :topic_users).where(
+    #   id: Bookmark.select_type(@bookmarks, "Post").map(&:bookmarkable_id)
+    # ).where(topic_users: { user_id: @user.id })
+    ActiveRecord::Associations::Preloader.new.preload(
+      Bookmark.select_type(@bookmarks, "Post"), [{bookmarkable: [{topic: :topic_users}]}]
+    )
 
     Bookmark.registered_bookmarkables.each do |registered_bookmarkable|
       bookmarkable_ids = Bookmark.select_type(@bookmarks, registered_bookmarkable.model.name).map(&:bookmarkable_id)
diff --git a/app/serializers/user_bookmark_list_serializer.rb b/app/serializers/user_bookmark_list_serializer.rb
index 8cd214d2e2..c8383f551a 100644
--- a/app/serializers/user_bookmark_list_serializer.rb
+++ b/app/serializers/user_bookmark_list_serializer.rb
@@ -8,9 +8,9 @@ class UserBookmarkListSerializer < ApplicationSerializer
       object.bookmarks.map do |bm|
         case bm.bookmarkable_type
         when "Topic"
-          UserTopicBookmarkSerializer.new(bm, object.topics.find { |t| t.id == bm.bookmarkable_id }, scope: scope, root: false)
+          UserTopicBookmarkSerializer.new(bm, scope: scope, root: false)
         when "Post"
-          UserPostBookmarkSerializer.new(bm, object.posts.find { |p| p.id == bm.bookmarkable_id }, scope: scope, root: false)
+          UserPostBookmarkSerializer.new(bm, scope: scope, root: false)
         else
           serialize_registered_type(bm)
         end
diff --git a/app/serializers/user_post_bookmark_serializer.rb b/app/serializers/user_post_bookmark_serializer.rb
index d89b1e19cc..e1fca8dbb0 100644
--- a/app/serializers/user_post_bookmark_serializer.rb
+++ b/app/serializers/user_post_bookmark_serializer.rb
@@ -1,14 +1,7 @@
 # frozen_string_literal: true
 
 class UserPostBookmarkSerializer < UserPostTopicBookmarkBaseSerializer
-  attr_reader :post, :post_id
-
-  def initialize(obj, post, opts)
-    super(obj, opts)
-    @post = post
-  end
-
-  delegate :topic, to: :post
+  attr_reader :post_id
 
   def post_id
     post.id
@@ -37,4 +30,14 @@ class UserPostBookmarkSerializer < UserPostTopicBookmarkBaseSerializer
   def bookmarkable_user
     @bookmarkable_user ||= post.user
   end
+
+  private
+
+  def topic
+    object.bookmarkable.topic
+  end
+
+  def post
+    object.bookmarkable
+  end
 end
diff --git a/app/serializers/user_topic_bookmark_serializer.rb b/app/serializers/user_topic_bookmark_serializer.rb
index a8170fbd77..a25235be45 100644
--- a/app/serializers/user_topic_bookmark_serializer.rb
+++ b/app/serializers/user_topic_bookmark_serializer.rb
@@ -1,13 +1,6 @@
 # frozen_string_literal: true
 
 class UserTopicBookmarkSerializer < UserPostTopicBookmarkBaseSerializer
-  attr_reader :topic
-
-  def initialize(obj, topic, opts)
-    super(obj, opts)
-    @topic = topic
-  end
-
   # it does not matter what the linked post number is for topic bookmarks,
   # on the client we always take the user to the last unread post in the
   # topic when the bookmark URL is clicked
@@ -56,4 +49,10 @@ class UserTopicBookmarkSerializer < UserPostTopicBookmarkBaseSerializer
   def bookmarkable_user
     @bookmarkable_user ||= first_post.user
   end
+
+  private
+
+  def topic
+    object.bookmarkable
+  end
 end
diff --git a/config/initializers/006-mini_profiler.rb b/config/initializers/006-mini_profiler.rb
index 2f80ebffc1..dbe59239a8 100644
--- a/config/initializers/006-mini_profiler.rb
+++ b/config/initializers/006-mini_profiler.rb
@@ -48,7 +48,8 @@ if defined?(Rack::MiniProfiler) && defined?(Rack::MiniProfiler::Config)
     /^\/javascripts\//,
     /^\/images\//,
     /^\/stylesheets\//,
-    /^\/favicon\/proxied/
+    /^\/favicon\/proxied/,
+    /^\/theme-javascripts/
   ]
 
   # we DO NOT WANT mini-profiler loading on anything but real desktops and laptops

// Note, CLIENT_SITE_SETTINGS_WITH_DEFAULTS is generated by the site-settings-plugin,
// writing to test-site-settings.js via the ember-cli-build pipeline.
// eslint-disable-next-line no-undef
let siteSettings = Object.assign({}, CLIENT_SITE_SETTINGS_WITH_DEFAULTS);

export function currentSettings() {
  return siteSettings;
}

// In debug mode, Ember will decorate objects with setters that remind you to use
// this.set() because they are bound (even if you use `unbound` or `readonly` in templates!).
// Site settings are only ever changed in tests and these warnings are not wanted, so we'll
// strip them when resetting our settings between tests.
function setValue(k, v) {
  let desc = Object.getOwnPropertyDescriptor(siteSettings, k);
  if (desc && !desc.writable) {
    Object.defineProperty(siteSettings, k, { writable: true });
  }
  siteSettings[k] = v;
}

export function mergeSettings(other) {
  for (let p in other) {
    if (other.hasOwnProperty(p)) {
      setValue(p, other[p]);
    }
  }
  return siteSettings;
}

export function resetSettings() {
  for (let p in siteSettings) {
    if (siteSettings.hasOwnProperty(p)) {
      // eslint-disable-next-line no-undef
      let v = CLIENT_SITE_SETTINGS_WITH_DEFAULTS[p];
      typeof v !== "undefined" ? setValue(p, v) : delete siteSettings[p];
    }
  }
  return siteSettings;
}

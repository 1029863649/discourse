import { setOwner } from "@ember/application";
import { debounce } from "@ember/runloop";
import { ajax } from "discourse/lib/ajax";
import { getHashtagTypeClasses } from "discourse/lib/hashtag-type-registry";

export default class HashtagTypeBase {
  // Store a list of IDs that are currently being loaded globally to make it
  // easier to batch requests for multiple types of hashtags
  static loadingIds = {};

  constructor(owner) {
    setOwner(this, owner);
    this.loadedIds = new Set();
  }

  get type() {
    throw "not implemented";
  }

  get preloadedData() {
    throw "not implemented";
  }

  generateColorCssClasses() {
    throw "not implemented";
  }

  generateIconHTML() {
    throw "not implemented";
  }

  async _load() {
    // Convert sets to arrays
    const data = Object.fromEntries(
      Object.entries(this.loadingIds).map(([type, ids]) => [type, [...ids]])
    );

    this.loadingIds = {};

    const hashtags = await ajax("/hashtags/by-ids", { data });
    const typeClasses = getHashtagTypeClasses();
    Object.entries(typeClasses).forEach(([type, typeClass]) =>
      hashtags[type]?.forEach((hashtag) => typeClass.onLoad(hashtag))
    );
  }

  isLoaded(id) {
    return this.loadedIds.has(parseInt(id, 10));
  }

  load(id) {
    if (!this.isLoaded(id)) {
      (this.loadingIds[this.type] ||= new Set()).add(id);
      debounce(this, this._load, 100, false);
    }
  }

  onLoad(hashtag) {
    if (!this.isLoaded(hashtag.id)) {
      // Append the styles for the loaded hashtag to the CSS generated by the
      // `hashtag-css-generator` initializer for preloaded models
      document.querySelector("#hashtag-css-generator").innerHTML +=
        "\n" + this.generateColorCssClasses(hashtag).join("\n");
    }
  }
}
